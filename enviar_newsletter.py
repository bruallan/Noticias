import os
import requests
import smtplib
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from datetime import datetime
import google.generativeai as genai

# --- 1. CONFIGURA√á√ÉO E COLETA DE DADOS ---

# Carrega as chaves das Secrets
API_KEY_GNEWS = os.getenv('GNEWS_API_KEY')
API_KEY_GEMINI = os.getenv('GEMINI_API_KEY')
SENDER_EMAIL = os.getenv('SENDER_EMAIL')
SENDER_PASSWORD = os.getenv('SENDER_PASSWORD')
RECEIVER_EMAILS_STR = os.getenv('RECEIVER_EMAIL')

# Configura a API do Gemini
genai.configure(api_key=API_KEY_GEMINI)

# Converte strings de e-mails para lista
RECEIVER_EMAILS_LIST = [email.strip() for email in RECEIVER_EMAILS_STR.split(',')]

# TEMAS DE PESQUISA (ajustados para o novo objetivo)
TEMAS_LIST = [
    "mercado imobili√°rio", 
    "constru√ß√£o civil",
    "imov√©is aracaju",
    "mercado aracaju",
    "lan√ßamentos imobili√°rios"
]

contexto_noticias = ""
print("Iniciando a busca de not√≠cias...")

# Busca not√≠cias para cada tema e as acumula em uma √∫nica string de contexto
for tema in TEMAS_LIST:
    url = f'https://gnews.io/api/v4/search?q="{tema}"&lang=pt&country=br&max=3&apikey={API_KEY_GNEWS}'
    try:
        response = requests.get(url)
        if response.status_code == 200:
            artigos = response.json().get('articles', [])
            for artigo in artigos:
                contexto_noticias += f"T√≠tulo: {artigo['title']}\n"
                contexto_noticias += f"Fonte: {artigo['source']['name']}\n"
                contexto_noticias += f"Conte√∫do: {artigo.get('description', '')}\n---\n"
    except Exception as e:
        print(f"Erro ao buscar not√≠cias sobre '{tema}': {e}")

# --- 2. GERA√á√ÉO DO TEXTO COM IA (GEMINI) ---

corpo_email_final = ""

if not contexto_noticias:
    corpo_email_final = "<h1>Nenhuma not√≠cia relevante encontrada hoje.</h1><p>N√£o foi poss√≠vel gerar a an√°lise do mercado de hoje.</p>"
else:
    # O prompt que definimos anteriormente
    prompt_template = """
    Voc√™ √© o autor carism√°tico e especialista da newsletter "Radar Imobili√°rio SE", focada no mercado imobili√°rio e constru√ß√£o civil de Sergipe.
    
    Sua miss√£o √© criar uma edi√ß√£o semanal que seja informativa, anal√≠tica e, acima de tudo, pessoal e engajante, como se estivesse conversando com um colega do setor.
    
    O tom deve ser otimista, direto e comunit√°rio. Use emojis de forma estrat√©gica (üëã, üìà, üèóÔ∏è, üí°, üëâ) para tornar a leitura mais leve e visual.
    
    **Siga RIGOROSAMENTE a seguinte estrutura:**
    
    **1. Abertura e Boas-Vindas (Estilo Comunit√°rio):**
       - Comece com uma sauda√ß√£o calorosa e pessoal. Use o emoji üëã.
       - D√™ as boas-vindas aos novos leitores e mencione o crescimento da comunidade (pode usar um n√∫mero fict√≠cio e positivo). Ex: "Que alegria ver nossa comunidade crescendo! Sejam muito bem-vindos os novos leitores!".
    
    **2. Sum√°rio da Edi√ß√£o ("O que vamos conversar hoje?"):**
       - Crie um t√≠tulo como "OS PRINCIPAIS PONTOS DE HOJE:" ou "NA EDI√á√ÉO DESTA SEMANA:".
       - Apresente em uma lista de 2 a 3 pontos (usando o emoji üëç) os principais t√≥picos que ser√£o abordados na sua an√°lise. Seja instigante.
    
    **3. An√°lise Principal (O Cora√ß√£o da Newsletter):**
       - Desenvolva o texto anal√≠tico (entre 250-350 palavras) baseado nas not√≠cias fornecidas abaixo.
       - Conecte as informa√ß√µes das not√≠cias para criar uma narrativa coesa sobre o momento atual do mercado em Sergipe.
       - Use **negrito** para destacar termos ou conclus√µes importantes.
       - Mantenha a linguagem acess√≠vel, evitando jarg√µes excessivamente t√©cnicos.
    
    **4. Fechamento e Mensagem Final:**
       - Termine com um par√°grafo final que deixe uma mensagem positiva, uma reflex√£o ou uma "dica de ouro" para a semana.
       - Fa√ßa uma despedida amig√°vel. Ex: "Uma √≥tima semana de neg√≥cios e at√© a pr√≥xima!".
    
    **N√ÉO FA√áA um resumo das not√≠cias.** Use-as como base para fundamentar a sua an√°lise original.
    
    **Not√≠cias de Base para a An√°lise:**
    ---
    {noticias}
    ---
    """
    
    prompt_completo = prompt_template.format(noticias=contexto_noticias)
    
    print("Enviando contexto para a IA para gera√ß√£o do texto...")
    try:
        model = genai.GenerativeModel('gemini-1.5-flash-latest') # Modelo r√°pido e eficiente
        response = model.generate_content(prompt_completo)
        
        # Converte a sa√≠da Markdown da IA para HTML b√°sico para o e-mail
        texto_gerado_html = response.text.replace('\n', '<br>')
        texto_gerado_html = texto_gerado_html.replace('**', '<b>', 100).replace('**', '</b>', 100) # Negrito
        texto_gerado_html = texto_gerado_html.replace('* ', '<br>‚Ä¢ ') # Listas
        
        corpo_email_final = f"<h1>An√°lise do Mercado Imobili√°rio e Constru√ß√£o Civil em Sergipe</h1>{texto_gerado_html}"
        
    except Exception as e:
        print(f"Erro ao gerar conte√∫do com a IA: {e}")
        corpo_email_final = "<h1>Erro na Gera√ß√£o da An√°lise</h1><p>Houve um problema ao conectar com a IA para gerar o texto da newsletter hoje.</p>"

# --- 3. L√ìGICA DE ENVIO DO E-MAIL ---
# (Esta parte √© a mesma de antes)
print("Preparando para enviar o e-mail...")

message = MIMEMultipart()
message["From"] = SENDER_EMAIL
message["To"] = ", ".join(RECEIVER_EMAILS_LIST)
message["Subject"] = f"An√°lise do Mercado Imobili√°rio (SE) - {datetime.now().strftime('%d/%m/%Y')}"

message.attach(MIMEText(corpo_email_final, "html", "utf-8"))

try:
    server = smtplib.SMTP("smtp.gmail.com", 587)
    server.starttls()
    server.login(SENDER_EMAIL, SENDER_PASSWORD)
    server.sendmail(SENDER_EMAIL, RECEIVER_EMAILS_LIST, message.as_string())
    print("Newsletter enviada com sucesso!")
except Exception as e:
    print(f"Falha ao enviar o e-mail: {e}")
finally:
    server.quit()


